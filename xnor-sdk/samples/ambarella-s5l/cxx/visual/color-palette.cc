// Copyright (c) 2019 Xnor.ai, Inc.
//

#include "color-palette.h"

#include "base/rectangle.h"

namespace xnor_sample {
namespace {

// The colors are generated by mixing a set  of primary colors in
// pseudorandom proportions.
const YuvColor kColors[] = {
    {156, 149, 176}, {172, 160, 84},  {183, 104, 72},  {161, 142, 159},
    {179, 115, 83},  {178, 130, 78},  {182, 106, 75},  {173, 158, 81},
    {158, 149, 167}, {180, 111, 80},  {173, 159, 80},  {182, 109, 74},
    {173, 156, 83},  {172, 160, 80},  {181, 109, 79},  {157, 149, 173},
    {173, 159, 80},  {156, 150, 178}, {182, 108, 78},  {171, 155, 91},
    {172, 160, 84},  {173, 159, 80},  {173, 157, 81},  {172, 160, 84},
    {172, 160, 82},  {156, 152, 174}, {173, 156, 84},  {165, 154, 122},
    {173, 159, 81},  {173, 159, 80},  {172, 154, 89},  {173, 156, 80},
    {180, 117, 81},  {181, 110, 79},  {156, 150, 177}, {172, 139, 101},
    {183, 105, 73},  {181, 107, 79},  {173, 152, 85},  {172, 159, 82},
    {171, 155, 91},  {173, 159, 79},  {171, 159, 87},  {156, 151, 177},
    {180, 110, 84},  {172, 160, 81},  {156, 151, 175}, {183, 106, 73},
    {171, 159, 91},  {159, 147, 163}, {157, 148, 172}, {172, 159, 82},
    {183, 107, 72},  {171, 156, 92},  {173, 159, 80},  {172, 157, 83},
    {155, 151, 181}, {173, 158, 80},  {182, 107, 76},  {172, 157, 85},
    {167, 154, 114}, {157, 147, 171}, {158, 149, 167}, {183, 106, 72},
    {182, 109, 77},  {156, 151, 174}, {183, 104, 72},  {156, 150, 178},
    {171, 158, 88},  {161, 145, 156}, {181, 109, 78},  {173, 151, 86},
    {172, 160, 81},  {181, 110, 81},  {183, 106, 72},  {182, 110, 74},
    {171, 157, 88},  {155, 151, 178}, {155, 152, 178}, {156, 150, 173},
    {170, 130, 121}, {171, 158, 89},  {172, 147, 95},  {165, 138, 141},
    {169, 137, 119}, {158, 148, 166}, {162, 142, 149}, {172, 160, 84},
    {155, 151, 180}, {171, 151, 97},  {182, 108, 77},  {172, 158, 84},
    {157, 148, 174}, {173, 158, 81},  {172, 158, 84},  {182, 107, 74}};
}  // namespace

YuvColor GetYuvColorByClassId(std::int32_t class_id) {
  if (class_id < 0) {
    throw std::out_of_range("YUV color class_id < 0");
  }
  return kColors[class_id % (sizeof(kColors) / sizeof(YuvColor))];
}
}  // namespace xnor_sample
